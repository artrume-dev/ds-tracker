{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 seconds for long-running scans\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for auth tokens (when implemented)\napi.interceptors.request.use(config => {\n  // Add auth token when available\n  // const token = localStorage.getItem('auth_token');\n  // if (token) {\n  //   config.headers.Authorization = `Bearer ${token}`;\n  // }\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// Scanner API\nexport const scannerAPI = {\n  // Run scans (Note: These may require auth in production)\n  runFullScan: () => api.post('/scans/run', {\n    type: 'full'\n  }, {\n    timeout: 60000\n  }),\n  // 60 seconds for full scan\n  runTeamScan: team => api.post('/scans/run', {\n    type: 'team',\n    team\n  }, {\n    timeout: 45000\n  }),\n  runRepositoryScan: (repository, team) => api.post('/scans/run', {\n    type: 'repository',\n    repository,\n    team\n  }, {\n    timeout: 30000\n  }),\n  // Get scan data (public endpoints)\n  getScanHistory: limit => api.get('/scans', {\n    params: {\n      limit\n    }\n  }),\n  getLatestScan: () => api.get('/scans/latest'),\n  getScanStatistics: () => api.get('/scans/statistics'),\n  // Token details\n  getTokenDetails: tokenName => api.get(`/scans/token/${tokenName}`),\n  // Schedule scans (may require auth)\n  scheduleAutomatedScan: (frequency, teams) => api.post('/scans/schedule', {\n    frequency,\n    teams\n  })\n};\n\n// Dashboard API\nexport const dashboardAPI = {\n  // Main dashboard data\n  getDashboardData: () => api.get('/dashboard'),\n  getMetrics: () => api.get('/dashboard/metrics'),\n  getTeamData: () => api.get('/dashboard/teams'),\n  getActivity: limit => api.get('/dashboard/activity', {\n    params: {\n      limit\n    }\n  }),\n  // New categorization and pattern endpoints\n  getCategorizedTokens: () => api.get('/dashboard/tokens/categorized'),\n  getPatterns: () => api.get('/dashboard/patterns')\n};\n\n// Teams API\nexport const teamsAPI = {\n  getTeams: () => api.get('/teams'),\n  getTeam: teamId => api.get(`/teams/${teamId}`),\n  createTeam: teamData => api.post('/teams', teamData),\n  updateTeam: (teamId, teamData) => api.put(`/teams/${teamId}`, teamData),\n  deleteTeam: teamId => api.delete(`/teams/${teamId}`)\n};\n\n// Tokens API\nexport const tokensAPI = {\n  getTokens: params => api.get('/tokens', {\n    params\n  }),\n  getToken: tokenId => api.get(`/tokens/${tokenId}`),\n  createToken: tokenData => api.post('/tokens', tokenData),\n  updateToken: (tokenId, tokenData) => api.put(`/tokens/${tokenId}`, tokenData),\n  deprecateToken: tokenId => api.post(`/tokens/${tokenId}/deprecate`)\n};\n\n// Change Requests API\nexport const changeRequestsAPI = {\n  getChangeRequests: params => api.get('/change-requests', {\n    params\n  }),\n  getChangeRequest: requestId => api.get(`/change-requests/${requestId}`),\n  createChangeRequest: requestData => api.post('/change-requests', requestData),\n  approveChangeRequest: requestId => api.post(`/change-requests/${requestId}/approve`),\n  rejectChangeRequest: (requestId, reason) => api.post(`/change-requests/${requestId}/reject`, {\n    reason\n  })\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getNotifications: params => api.get('/notifications', {\n    params\n  }),\n  markAsRead: notificationId => api.put(`/notifications/${notificationId}/read`),\n  markAllAsRead: () => api.put('/notifications/read-all')\n};\n\n// Health check\nexport const healthAPI = {\n  checkHealth: () => api.get('/health')\n};\n\n// Export the base API instance for custom requests\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","response","error","_error$response","console","data","message","Promise","reject","scannerAPI","runFullScan","post","type","runTeamScan","team","runRepositoryScan","repository","getScanHistory","limit","get","params","getLatestScan","getScanStatistics","getTokenDetails","tokenName","scheduleAutomatedScan","frequency","teams","dashboardAPI","getDashboardData","getMetrics","getTeamData","getActivity","getCategorizedTokens","getPatterns","teamsAPI","getTeams","getTeam","teamId","createTeam","teamData","updateTeam","put","deleteTeam","delete","tokensAPI","getTokens","getToken","tokenId","createToken","tokenData","updateToken","deprecateToken","changeRequestsAPI","getChangeRequests","getChangeRequest","requestId","createChangeRequest","requestData","approveChangeRequest","rejectChangeRequest","reason","notificationsAPI","getNotifications","markAsRead","notificationId","markAllAsRead","healthAPI","checkHealth"],"sources":["/Users/samarmustafa/Documents/Samar/50-apps-to-launch/DS-TRACKER/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000, // 30 seconds for long-running scans\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for auth tokens (when implemented)\napi.interceptors.request.use((config) => {\n  // Add auth token when available\n  // const token = localStorage.getItem('auth_token');\n  // if (token) {\n  //   config.headers.Authorization = `Bearer ${token}`;\n  // }\n  return config;\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    console.error('API Error:', error.response?.data || error.message);\n    return Promise.reject(error);\n  }\n);\n\n// Scanner API\nexport const scannerAPI = {\n  // Run scans (Note: These may require auth in production)\n  runFullScan: () => api.post('/scans/run', { type: 'full' }, { timeout: 60000 }), // 60 seconds for full scan\n  runTeamScan: (team: string) => api.post('/scans/run', { type: 'team', team }, { timeout: 45000 }),\n  runRepositoryScan: (repository: string, team: string) => \n    api.post('/scans/run', { type: 'repository', repository, team }, { timeout: 30000 }),\n\n  // Get scan data (public endpoints)\n  getScanHistory: (limit?: number) => api.get('/scans', { params: { limit } }),\n  getLatestScan: () => api.get('/scans/latest'),\n  getScanStatistics: () => api.get('/scans/statistics'),\n  \n  // Token details\n  getTokenDetails: (tokenName: string) => api.get(`/scans/token/${tokenName}`),\n  \n  // Schedule scans (may require auth)\n  scheduleAutomatedScan: (frequency: string, teams?: string[]) =>\n    api.post('/scans/schedule', { frequency, teams }),\n};\n\n// Dashboard API\nexport const dashboardAPI = {\n  // Main dashboard data\n  getDashboardData: () => api.get('/dashboard'),\n  getMetrics: () => api.get('/dashboard/metrics'),\n  getTeamData: () => api.get('/dashboard/teams'),\n  getActivity: (limit?: number) => api.get('/dashboard/activity', { params: { limit } }),\n  \n  // New categorization and pattern endpoints\n  getCategorizedTokens: () => api.get('/dashboard/tokens/categorized'),\n  getPatterns: () => api.get('/dashboard/patterns'),\n};\n\n// Teams API\nexport const teamsAPI = {\n  getTeams: () => api.get('/teams'),\n  getTeam: (teamId: string) => api.get(`/teams/${teamId}`),\n  createTeam: (teamData: any) => api.post('/teams', teamData),\n  updateTeam: (teamId: string, teamData: any) => api.put(`/teams/${teamId}`, teamData),\n  deleteTeam: (teamId: string) => api.delete(`/teams/${teamId}`),\n};\n\n// Tokens API\nexport const tokensAPI = {\n  getTokens: (params?: any) => api.get('/tokens', { params }),\n  getToken: (tokenId: string) => api.get(`/tokens/${tokenId}`),\n  createToken: (tokenData: any) => api.post('/tokens', tokenData),\n  updateToken: (tokenId: string, tokenData: any) => api.put(`/tokens/${tokenId}`, tokenData),\n  deprecateToken: (tokenId: string) => api.post(`/tokens/${tokenId}/deprecate`),\n};\n\n// Change Requests API\nexport const changeRequestsAPI = {\n  getChangeRequests: (params?: any) => api.get('/change-requests', { params }),\n  getChangeRequest: (requestId: string) => api.get(`/change-requests/${requestId}`),\n  createChangeRequest: (requestData: any) => api.post('/change-requests', requestData),\n  approveChangeRequest: (requestId: string) => api.post(`/change-requests/${requestId}/approve`),\n  rejectChangeRequest: (requestId: string, reason: string) => \n    api.post(`/change-requests/${requestId}/reject`, { reason }),\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getNotifications: (params?: any) => api.get('/notifications', { params }),\n  markAsRead: (notificationId: string) => api.put(`/notifications/${notificationId}/read`),\n  markAllAsRead: () => api.put('/notifications/read-all'),\n};\n\n// Health check\nexport const healthAPI = {\n  checkHealth: () => api.get('/health'),\n};\n\n// Export the base API instance for custom requests\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}