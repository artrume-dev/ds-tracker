{"ast":null,"code":"var _jsxFileName = \"/Users/samarmustafa/Documents/Samar/50-apps-to-launch/DS-TRACKER/frontend/src/contexts/NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext(undefined);\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isConnected, setIsConnected] = useState(false);\n  const [currentTeam, setCurrentTeam] = useState(null);\n  useEffect(() => {\n    // Initialize socket connection\n    const newSocket = io(process.env.REACT_APP_BACKEND_URL || 'http://localhost:5001', {\n      transports: ['websocket', 'polling']\n    });\n    newSocket.on('connect', () => {\n      console.log('ðŸ”Œ Connected to notification service');\n      setIsConnected(true);\n    });\n    newSocket.on('disconnect', () => {\n      console.log('ðŸ”Œ Disconnected from notification service');\n      setIsConnected(false);\n    });\n    newSocket.on('new_notification', data => {\n      if (data.teamName === currentTeam) {\n        setNotifications(prev => [data.notification, ...prev.slice(0, 49)]); // Keep last 50\n\n        // Show browser notification if permission granted\n        if (Notification.permission === 'granted') {\n          new Notification(data.notification.title, {\n            body: data.notification.message,\n            icon: '/favicon.ico'\n          });\n        }\n      }\n    });\n    newSocket.on('unread_count', data => {\n      if (data.teamName === currentTeam) {\n        setUnreadCount(data.count);\n      }\n    });\n    newSocket.on('notifications_history', data => {\n      if (data.teamName === currentTeam) {\n        setNotifications(data.notifications.map(n => ({\n          ...n,\n          timestamp: new Date(n.timestamp)\n        })));\n      }\n    });\n    newSocket.on('team_notifications', data => {\n      if (data.teamName === currentTeam) {\n        setNotifications(data.notifications.map(n => ({\n          ...n,\n          timestamp: new Date(n.timestamp)\n        })));\n      }\n    });\n    newSocket.on('system_announcement', data => {\n      // Handle system announcements\n      const systemNotification = {\n        id: `system-${Date.now()}`,\n        type: 'system_alert',\n        title: data.title,\n        message: data.message,\n        severity: data.severity,\n        timestamp: new Date(data.timestamp),\n        read: false\n      };\n      setNotifications(prev => [systemNotification, ...prev.slice(0, 49)]);\n    });\n    setSocket(newSocket);\n\n    // Request notification permission\n    if ('Notification' in window && Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n    return () => {\n      newSocket.close();\n    };\n  }, [currentTeam]);\n  const subscribeToTeam = teamName => {\n    if (socket && teamName !== currentTeam) {\n      // Unsubscribe from previous team\n      if (currentTeam) {\n        socket.emit('unsubscribe_team', currentTeam);\n      }\n\n      // Subscribe to new team\n      socket.emit('subscribe_team', teamName);\n      setCurrentTeam(teamName);\n\n      // Reset notifications for new team\n      setNotifications([]);\n      setUnreadCount(0);\n    }\n  };\n  const markAsRead = notificationId => {\n    if (socket && currentTeam) {\n      socket.emit('mark_notification_read', {\n        teamName: currentTeam,\n        notificationId\n      });\n\n      // Update local state\n      setNotifications(prev => prev.map(n => n.id === notificationId ? {\n        ...n,\n        read: true\n      } : n));\n    }\n  };\n  const markAllAsRead = () => {\n    if (socket && currentTeam) {\n      socket.emit('mark_all_read', currentTeam);\n\n      // Update local state\n      setNotifications(prev => prev.map(n => ({\n        ...n,\n        read: true\n      })));\n      setUnreadCount(0);\n    }\n  };\n  const value = {\n    notifications,\n    unreadCount,\n    isConnected,\n    subscribeToTeam,\n    markAsRead,\n    markAllAsRead,\n    currentTeam\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationProvider, \"9a4P3c+/2TDmdRYlFZh0lQsdwHQ=\");\n_c = NotificationProvider;\nexport const useNotifications = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s2(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","NotificationContext","undefined","NotificationProvider","children","_s","socket","setSocket","notifications","setNotifications","unreadCount","setUnreadCount","isConnected","setIsConnected","currentTeam","setCurrentTeam","newSocket","process","env","REACT_APP_BACKEND_URL","transports","on","console","log","data","teamName","prev","notification","slice","Notification","permission","title","body","message","icon","count","map","n","timestamp","Date","systemNotification","id","now","type","severity","read","window","requestPermission","close","subscribeToTeam","emit","markAsRead","notificationId","markAllAsRead","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotifications","_s2","context","Error","$RefreshReg$"],"sources":["/Users/samarmustafa/Documents/Samar/50-apps-to-launch/DS-TRACKER/frontend/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\nexport interface NotificationData {\n  id: string;\n  type: 'token_change' | 'pattern_update' | 'scan_complete' | 'approval_required' | 'system_alert';\n  title: string;\n  message: string;\n  severity: 'info' | 'warning' | 'error' | 'success';\n  metadata?: {\n    tokenName?: string;\n    teamName?: string;\n    oldValue?: string;\n    newValue?: string;\n    affectedFiles?: string[];\n    scanId?: string;\n    requestId?: string;\n  };\n  timestamp: Date;\n  read: boolean;\n  actionUrl?: string;\n}\n\ninterface NotificationContextType {\n  notifications: NotificationData[];\n  unreadCount: number;\n  isConnected: boolean;\n  subscribeToTeam: (teamName: string) => void;\n  markAsRead: (notificationId: string) => void;\n  markAllAsRead: () => void;\n  currentTeam: string | null;\n}\n\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [notifications, setNotifications] = useState<NotificationData[]>([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isConnected, setIsConnected] = useState(false);\n  const [currentTeam, setCurrentTeam] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Initialize socket connection\n    const newSocket = io(process.env.REACT_APP_BACKEND_URL || 'http://localhost:5001', {\n      transports: ['websocket', 'polling']\n    });\n\n    newSocket.on('connect', () => {\n      console.log('ðŸ”Œ Connected to notification service');\n      setIsConnected(true);\n    });\n\n    newSocket.on('disconnect', () => {\n      console.log('ðŸ”Œ Disconnected from notification service');\n      setIsConnected(false);\n    });\n\n    newSocket.on('new_notification', (data: { teamName: string; notification: NotificationData }) => {\n      if (data.teamName === currentTeam) {\n        setNotifications(prev => [data.notification, ...prev.slice(0, 49)]); // Keep last 50\n        \n        // Show browser notification if permission granted\n        if (Notification.permission === 'granted') {\n          new Notification(data.notification.title, {\n            body: data.notification.message,\n            icon: '/favicon.ico'\n          });\n        }\n      }\n    });\n\n    newSocket.on('unread_count', (data: { teamName: string; count: number }) => {\n      if (data.teamName === currentTeam) {\n        setUnreadCount(data.count);\n      }\n    });\n\n    newSocket.on('notifications_history', (data: { teamName: string; notifications: NotificationData[] }) => {\n      if (data.teamName === currentTeam) {\n        setNotifications(data.notifications.map(n => ({\n          ...n,\n          timestamp: new Date(n.timestamp)\n        })));\n      }\n    });\n\n    newSocket.on('team_notifications', (data: { teamName: string; notifications: NotificationData[] }) => {\n      if (data.teamName === currentTeam) {\n        setNotifications(data.notifications.map(n => ({\n          ...n,\n          timestamp: new Date(n.timestamp)\n        })));\n      }\n    });\n\n    newSocket.on('system_announcement', (data: { title: string; message: string; severity: string; timestamp: Date }) => {\n      // Handle system announcements\n      const systemNotification: NotificationData = {\n        id: `system-${Date.now()}`,\n        type: 'system_alert',\n        title: data.title,\n        message: data.message,\n        severity: data.severity as NotificationData['severity'],\n        timestamp: new Date(data.timestamp),\n        read: false\n      };\n      \n      setNotifications(prev => [systemNotification, ...prev.slice(0, 49)]);\n    });\n\n    setSocket(newSocket);\n\n    // Request notification permission\n    if ('Notification' in window && Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n\n    return () => {\n      newSocket.close();\n    };\n  }, [currentTeam]);\n\n  const subscribeToTeam = (teamName: string) => {\n    if (socket && teamName !== currentTeam) {\n      // Unsubscribe from previous team\n      if (currentTeam) {\n        socket.emit('unsubscribe_team', currentTeam);\n      }\n      \n      // Subscribe to new team\n      socket.emit('subscribe_team', teamName);\n      setCurrentTeam(teamName);\n      \n      // Reset notifications for new team\n      setNotifications([]);\n      setUnreadCount(0);\n    }\n  };\n\n  const markAsRead = (notificationId: string) => {\n    if (socket && currentTeam) {\n      socket.emit('mark_notification_read', {\n        teamName: currentTeam,\n        notificationId\n      });\n\n      // Update local state\n      setNotifications(prev => \n        prev.map(n => \n          n.id === notificationId ? { ...n, read: true } : n\n        )\n      );\n    }\n  };\n\n  const markAllAsRead = () => {\n    if (socket && currentTeam) {\n      socket.emit('mark_all_read', currentTeam);\n      \n      // Update local state\n      setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n      setUnreadCount(0);\n    }\n  };\n\n  const value: NotificationContextType = {\n    notifications,\n    unreadCount,\n    isConnected,\n    subscribeToTeam,\n    markAsRead,\n    markAllAsRead,\n    currentTeam\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport const useNotifications = (): NotificationContextType => {\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}