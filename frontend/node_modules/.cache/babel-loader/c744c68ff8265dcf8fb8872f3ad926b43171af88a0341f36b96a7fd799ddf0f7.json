{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { scannerAPI } from '../services/api';\nexport const useScanner = () => {\n  _s();\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const [scanStatus, setScanStatus] = useState('');\n  const [error, setError] = useState(null);\n  const runFullScan = useCallback(async () => {\n    try {\n      var _response$data$summar, _response$data$summar2, _response$data$summar3;\n      setIsScanning(true);\n      setError(null);\n      setScanStatus('Initializing full scan...');\n      setScanProgress(10);\n\n      // Start progress simulation immediately\n      setScanStatus('Connecting to scanner service...');\n      setScanProgress(20);\n      await new Promise(resolve => setTimeout(resolve, 500)); // Brief delay for UI feedback\n\n      setScanStatus('Scanning Canon Design System repositories...');\n      setScanProgress(40);\n\n      // Call the real API with proper error handling\n      const response = await scannerAPI.runFullScan();\n      setScanProgress(70);\n      setScanStatus('Analyzing token patterns and dependencies...');\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setScanProgress(90);\n      setScanStatus('Finalizing scan results...');\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // API call successful, complete the progress\n      setScanProgress(100);\n      const totalTokens = ((_response$data$summar = response.data.summary) === null || _response$data$summar === void 0 ? void 0 : _response$data$summar.totalTokens) || 0;\n      const totalRepos = ((_response$data$summar2 = response.data.summary) === null || _response$data$summar2 === void 0 ? void 0 : _response$data$summar2.totalRepositories) || 0;\n      const uniqueTokens = ((_response$data$summar3 = response.data.summary) === null || _response$data$summar3 === void 0 ? void 0 : _response$data$summar3.uniqueTokens) || 0;\n      setScanStatus(`✅ Scan completed successfully! Found ${totalTokens} tokens (${uniqueTokens} unique) across ${totalRepos} repository.`);\n      setIsScanning(false);\n\n      // Reset after a longer delay to show success message\n      setTimeout(() => {\n        setScanProgress(0);\n        setScanStatus('');\n      }, 10000);\n      return response.data;\n    } catch (err) {\n      var _err$response, _err$response2, _err$response3, _err$response3$data;\n      console.error('Scan API error:', err);\n\n      // More specific error handling\n      let errorMessage = '❌ Scan failed: ';\n      if (err.code === 'NETWORK_ERROR' || err.message === 'Network Error') {\n        errorMessage += 'Unable to connect to scanner service. Please check if the backend is running on http://localhost:5001';\n      } else if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 404) {\n        errorMessage += 'Scan endpoint not found. Please check the API configuration.';\n      } else if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) >= 500) {\n        errorMessage += 'Internal server error. Please try again later.';\n      } else if ((_err$response3 = err.response) !== null && _err$response3 !== void 0 && (_err$response3$data = _err$response3.data) !== null && _err$response3$data !== void 0 && _err$response3$data.message) {\n        errorMessage += err.response.data.message;\n      } else {\n        errorMessage += err.message || 'Unknown error occurred';\n      }\n      setError(errorMessage);\n      setIsScanning(false);\n      setScanProgress(0);\n      setScanStatus('');\n\n      // Clear error after a longer delay for user to read\n      setTimeout(() => {\n        setError(null);\n      }, 10000);\n      throw err;\n    }\n  }, []);\n  const runTeamScan = useCallback(async team => {\n    try {\n      setIsScanning(true);\n      setError(null);\n      setScanStatus(`Scanning ${team} repositories...`);\n      setScanProgress(20);\n      const response = await scannerAPI.runTeamScan(team);\n\n      // Simulate progress\n      setTimeout(() => {\n        setScanProgress(100);\n        setScanStatus(`${team} scan completed`);\n        setIsScanning(false);\n        setTimeout(() => {\n          setScanProgress(0);\n          setScanStatus('');\n        }, 2000);\n      }, 3000);\n      return response.data;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Failed to run team scan');\n      setIsScanning(false);\n      setScanProgress(0);\n      setScanStatus('');\n      throw err;\n    }\n  }, []);\n  const runRepositoryScan = useCallback(async (repository, team) => {\n    try {\n      setIsScanning(true);\n      setError(null);\n      setScanStatus(`Scanning ${repository}...`);\n      setScanProgress(30);\n      const response = await scannerAPI.runRepositoryScan(repository, team);\n      setTimeout(() => {\n        setScanProgress(100);\n        setScanStatus(`${repository} scan completed`);\n        setIsScanning(false);\n        setTimeout(() => {\n          setScanProgress(0);\n          setScanStatus('');\n        }, 2000);\n      }, 2000);\n      return response.data;\n    } catch (err) {\n      var _err$response5, _err$response5$data;\n      setError(((_err$response5 = err.response) === null || _err$response5 === void 0 ? void 0 : (_err$response5$data = _err$response5.data) === null || _err$response5$data === void 0 ? void 0 : _err$response5$data.message) || 'Failed to run repository scan');\n      setIsScanning(false);\n      setScanProgress(0);\n      setScanStatus('');\n      throw err;\n    }\n  }, []);\n  const getScanHistory = useCallback(async limit => {\n    try {\n      const response = await scannerAPI.getScanHistory(limit);\n      return response.data;\n    } catch (err) {\n      var _err$response6, _err$response6$data;\n      setError(((_err$response6 = err.response) === null || _err$response6 === void 0 ? void 0 : (_err$response6$data = _err$response6.data) === null || _err$response6$data === void 0 ? void 0 : _err$response6$data.message) || 'Failed to fetch scan history');\n      throw err;\n    }\n  }, []);\n  const getLatestScan = useCallback(async () => {\n    try {\n      const response = await scannerAPI.getLatestScan();\n      return response.data;\n    } catch (err) {\n      var _err$response7, _err$response7$data;\n      setError(((_err$response7 = err.response) === null || _err$response7 === void 0 ? void 0 : (_err$response7$data = _err$response7.data) === null || _err$response7$data === void 0 ? void 0 : _err$response7$data.message) || 'Failed to fetch latest scan');\n      throw err;\n    }\n  }, []);\n  const getScanStatistics = useCallback(async () => {\n    try {\n      const response = await scannerAPI.getScanStatistics();\n      return response.data;\n    } catch (err) {\n      var _err$response8, _err$response8$data;\n      setError(((_err$response8 = err.response) === null || _err$response8 === void 0 ? void 0 : (_err$response8$data = _err$response8.data) === null || _err$response8$data === void 0 ? void 0 : _err$response8$data.message) || 'Failed to fetch scan statistics');\n      // Return mock data if API fails\n      return {\n        totalTokens: 0,\n        totalUsages: 0,\n        uniqueTokens: 0,\n        teamsCount: 0,\n        repositoriesCount: 0\n      };\n    }\n  }, []);\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n  return {\n    // State\n    isScanning,\n    scanProgress,\n    scanStatus,\n    error,\n    // Actions\n    runFullScan,\n    runTeamScan,\n    runRepositoryScan,\n    getScanHistory,\n    getLatestScan,\n    getScanStatistics,\n    clearError\n  };\n};\n_s(useScanner, \"fOyilqxWLa/gzEp24o6O0I5SEbE=\");","map":{"version":3,"names":["useState","useCallback","scannerAPI","useScanner","_s","isScanning","setIsScanning","scanProgress","setScanProgress","scanStatus","setScanStatus","error","setError","runFullScan","_response$data$summar","_response$data$summar2","_response$data$summar3","Promise","resolve","setTimeout","response","totalTokens","data","summary","totalRepos","totalRepositories","uniqueTokens","err","_err$response","_err$response2","_err$response3","_err$response3$data","console","errorMessage","code","message","status","runTeamScan","team","_err$response4","_err$response4$data","runRepositoryScan","repository","_err$response5","_err$response5$data","getScanHistory","limit","_err$response6","_err$response6$data","getLatestScan","_err$response7","_err$response7$data","getScanStatistics","_err$response8","_err$response8$data","totalUsages","teamsCount","repositoriesCount","clearError"],"sources":["/Users/samarmustafa/Documents/Samar/50-apps-to-launch/DS-TRACKER/frontend/src/hooks/useScanner.ts"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { scannerAPI } from '../services/api';\n\nexport interface ScanResult {\n  id: string;\n  type: 'full' | 'team' | 'repository';\n  status: 'running' | 'completed' | 'failed';\n  startTime: string;\n  endTime?: string;\n  results?: {\n    tokensFound: number;\n    filesScanned: number;\n    repositoriesScanned: number;\n    errors: string[];\n  };\n}\n\nexport interface ScanStatistics {\n  totalTokens: number;\n  totalUsages: number;\n  uniqueTokens: number;\n  teamsCount: number;\n  repositoriesCount: number;\n  lastScanTime?: string;\n}\n\nexport const useScanner = () => {\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n  const [scanStatus, setScanStatus] = useState<string>('');\n  const [error, setError] = useState<string | null>(null);\n\n  const runFullScan = useCallback(async () => {\n    try {\n      setIsScanning(true);\n      setError(null);\n      setScanStatus('Initializing full scan...');\n      setScanProgress(10);\n\n      // Start progress simulation immediately\n      setScanStatus('Connecting to scanner service...');\n      setScanProgress(20);\n\n      await new Promise(resolve => setTimeout(resolve, 500)); // Brief delay for UI feedback\n\n      setScanStatus('Scanning Canon Design System repositories...');\n      setScanProgress(40);\n\n      // Call the real API with proper error handling\n      const response = await scannerAPI.runFullScan();\n      \n      setScanProgress(70);\n      setScanStatus('Analyzing token patterns and dependencies...');\n      \n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      setScanProgress(90);\n      setScanStatus('Finalizing scan results...');\n      \n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // API call successful, complete the progress\n      setScanProgress(100);\n      const totalTokens = response.data.summary?.totalTokens || 0;\n      const totalRepos = response.data.summary?.totalRepositories || 0;\n      const uniqueTokens = response.data.summary?.uniqueTokens || 0;\n      setScanStatus(`✅ Scan completed successfully! Found ${totalTokens} tokens (${uniqueTokens} unique) across ${totalRepos} repository.`);\n      setIsScanning(false);\n      \n      // Reset after a longer delay to show success message\n      setTimeout(() => {\n        setScanProgress(0);\n        setScanStatus('');\n      }, 10000);\n\n      return response.data;\n    } catch (err: any) {\n      console.error('Scan API error:', err);\n      \n      // More specific error handling\n      let errorMessage = '❌ Scan failed: ';\n      if (err.code === 'NETWORK_ERROR' || err.message === 'Network Error') {\n        errorMessage += 'Unable to connect to scanner service. Please check if the backend is running on http://localhost:5001';\n      } else if (err.response?.status === 404) {\n        errorMessage += 'Scan endpoint not found. Please check the API configuration.';\n      } else if (err.response?.status >= 500) {\n        errorMessage += 'Internal server error. Please try again later.';\n      } else if (err.response?.data?.message) {\n        errorMessage += err.response.data.message;\n      } else {\n        errorMessage += err.message || 'Unknown error occurred';\n      }\n      \n      setError(errorMessage);\n      setIsScanning(false);\n      setScanProgress(0);\n      setScanStatus('');\n      \n      // Clear error after a longer delay for user to read\n      setTimeout(() => {\n        setError(null);\n      }, 10000);\n      \n      throw err;\n    }\n  }, []);\n\n  const runTeamScan = useCallback(async (team: string) => {\n    try {\n      setIsScanning(true);\n      setError(null);\n      setScanStatus(`Scanning ${team} repositories...`);\n      setScanProgress(20);\n\n      const response = await scannerAPI.runTeamScan(team);\n      \n      // Simulate progress\n      setTimeout(() => {\n        setScanProgress(100);\n        setScanStatus(`${team} scan completed`);\n        setIsScanning(false);\n        \n        setTimeout(() => {\n          setScanProgress(0);\n          setScanStatus('');\n        }, 2000);\n      }, 3000);\n\n      return response.data;\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to run team scan');\n      setIsScanning(false);\n      setScanProgress(0);\n      setScanStatus('');\n      throw err;\n    }\n  }, []);\n\n  const runRepositoryScan = useCallback(async (repository: string, team: string) => {\n    try {\n      setIsScanning(true);\n      setError(null);\n      setScanStatus(`Scanning ${repository}...`);\n      setScanProgress(30);\n\n      const response = await scannerAPI.runRepositoryScan(repository, team);\n      \n      setTimeout(() => {\n        setScanProgress(100);\n        setScanStatus(`${repository} scan completed`);\n        setIsScanning(false);\n        \n        setTimeout(() => {\n          setScanProgress(0);\n          setScanStatus('');\n        }, 2000);\n      }, 2000);\n\n      return response.data;\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to run repository scan');\n      setIsScanning(false);\n      setScanProgress(0);\n      setScanStatus('');\n      throw err;\n    }\n  }, []);\n\n  const getScanHistory = useCallback(async (limit?: number) => {\n    try {\n      const response = await scannerAPI.getScanHistory(limit);\n      return response.data;\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to fetch scan history');\n      throw err;\n    }\n  }, []);\n\n  const getLatestScan = useCallback(async () => {\n    try {\n      const response = await scannerAPI.getLatestScan();\n      return response.data;\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to fetch latest scan');\n      throw err;\n    }\n  }, []);\n\n  const getScanStatistics = useCallback(async (): Promise<ScanStatistics> => {\n    try {\n      const response = await scannerAPI.getScanStatistics();\n      return response.data;\n    } catch (err: any) {\n      setError(err.response?.data?.message || 'Failed to fetch scan statistics');\n      // Return mock data if API fails\n      return {\n        totalTokens: 0,\n        totalUsages: 0,\n        uniqueTokens: 0,\n        teamsCount: 0,\n        repositoriesCount: 0,\n      };\n    }\n  }, []);\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    // State\n    isScanning,\n    scanProgress,\n    scanStatus,\n    error,\n\n    // Actions\n    runFullScan,\n    runTeamScan,\n    runRepositoryScan,\n    getScanHistory,\n    getLatestScan,\n    getScanStatistics,\n    clearError,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}