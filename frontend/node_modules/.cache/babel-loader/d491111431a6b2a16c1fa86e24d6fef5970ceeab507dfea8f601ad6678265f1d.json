{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { dashboardAPI } from '../services/api';\n// Move mock data outside the component to prevent recreation on every render\nconst mockMetrics = {\n  totalTokens: 247,\n  activeUsages: 1834,\n  teamsCount: 12,\n  criticalIssues: 3,\n  growthPercentage: 12.5,\n  usageGrowth: 8.2,\n  teamGrowth: 25.0,\n  issueReduction: -15.3\n};\nconst mockTeamData = [{\n  name: 'Frontend',\n  adoption: 95,\n  trend: 'up'\n}, {\n  name: 'Mobile',\n  adoption: 87,\n  trend: 'up'\n}, {\n  name: 'Platform',\n  adoption: 78,\n  trend: 'stable'\n}, {\n  name: 'Marketing',\n  adoption: 45,\n  trend: 'down'\n}, {\n  name: 'Analytics',\n  adoption: 62,\n  trend: 'up'\n}];\nconst mockActivity = [{\n  id: '1',\n  type: 'scan',\n  description: 'Full system scan completed - 12 new token usages found',\n  timestamp: '2024-01-15T10:30:00Z',\n  user: 'System',\n  severity: 'info'\n}, {\n  id: '2',\n  type: 'token_update',\n  description: 'Token color-primary updated from #1f2937 to #1e40af',\n  timestamp: '2024-01-15T09:15:00Z',\n  user: 'Sarah Chen',\n  severity: 'warning'\n}, {\n  id: '3',\n  type: 'team_join',\n  description: 'Analytics team joined the design system',\n  timestamp: '2024-01-15T08:45:00Z',\n  user: 'Mike Johnson',\n  severity: 'info'\n}, {\n  id: '4',\n  type: 'issue',\n  description: 'Deprecated token found in Mobile app - spacing-xl',\n  timestamp: '2024-01-15T08:20:00Z',\n  user: 'Scanner',\n  severity: 'error'\n}, {\n  id: '5',\n  type: 'scan',\n  description: 'Mobile team scan completed - no issues found',\n  timestamp: '2024-01-15T07:30:00Z',\n  user: 'System',\n  severity: 'info'\n}];\nconst mockTopTokens = [{\n  name: 'color-primary-500',\n  usage: 156,\n  category: 'color',\n  trend: 'up',\n  change: '+12%'\n}, {\n  name: 'spacing-md',\n  usage: 143,\n  category: 'spacing',\n  trend: 'up',\n  change: '+8%'\n}, {\n  name: 'font-size-lg',\n  usage: 132,\n  category: 'typography',\n  trend: 'up',\n  change: '+15%'\n}, {\n  name: 'border-radius-md',\n  usage: 98,\n  category: 'border',\n  trend: 'up',\n  change: '+5%'\n}, {\n  name: 'shadow-lg',\n  usage: 87,\n  category: 'shadow',\n  trend: 'down',\n  change: '-2%'\n}];\nexport const useDashboard = () => {\n  _s();\n  // Helper functions to transform API data\n  const transformActivityType = apiType => {\n    switch (apiType) {\n      case 'scan-completed':\n        return 'scan';\n      case 'token-updated':\n      case 'token-deprecated':\n        return 'token_update';\n      case 'team-added':\n        return 'team_join';\n      case 'approval-requested':\n        return 'issue';\n      default:\n        return 'scan';\n    }\n  };\n  const getSeverityFromType = apiType => {\n    switch (apiType) {\n      case 'token-deprecated':\n      case 'approval-requested':\n        return 'warning';\n      case 'scan-failed':\n        return 'error';\n      default:\n        return 'info';\n    }\n  };\n  const [metrics, setMetrics] = useState({\n    totalTokens: 0,\n    activeUsages: 0,\n    teamsCount: 0,\n    criticalIssues: 0,\n    growthPercentage: 0,\n    usageGrowth: 0,\n    teamGrowth: 0,\n    issueReduction: 0\n  });\n  const [teamData, setTeamData] = useState([]);\n  const [activity, setActivity] = useState([]);\n  const [topTokens, setTopTokens] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchDashboardData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Try to fetch real data from API\n      try {\n        var _dashboardData$teamAd;\n        // Use the full dashboard endpoint instead of separate endpoints\n        const dashboardResponse = await dashboardAPI.getDashboardData();\n        const dashboardData = dashboardResponse.data.data;\n\n        // Set metrics from dashboard data\n        setMetrics({\n          totalTokens: dashboardData.metrics.totalTokens || 0,\n          activeUsages: dashboardData.metrics.totalUsage || 0,\n          teamsCount: dashboardData.metrics.teamsUsing || 0,\n          criticalIssues: dashboardData.metrics.criticalIssues || 0,\n          growthPercentage: dashboardData.metrics.weeklyGrowth || 0,\n          usageGrowth: dashboardData.metrics.weeklyGrowth || 0,\n          teamGrowth: 0,\n          // Calculate from team data if needed\n          issueReduction: 0 // Calculate from historical data if needed\n        });\n\n        // Transform team adoption data\n        const transformedTeamData = ((_dashboardData$teamAd = dashboardData.teamAdoption) === null || _dashboardData$teamAd === void 0 ? void 0 : _dashboardData$teamAd.map(team => ({\n          name: team.teamName,\n          adoption: team.adoptionScore,\n          trend: team.trend || 'stable'\n        }))) || [];\n        setTeamData(transformedTeamData);\n\n        // Transform API activity data to match frontend interface\n        const apiActivityData = Array.isArray(dashboardData.recentActivity) ? dashboardData.recentActivity : [];\n        const transformedActivity = apiActivityData.map(item => {\n          var _item$id;\n          return {\n            id: ((_item$id = item.id) === null || _item$id === void 0 ? void 0 : _item$id.toString()) || Math.random().toString(),\n            type: transformActivityType(item.type),\n            description: item.message || item.description || 'Activity recorded',\n            timestamp: item.timestamp,\n            user: item.user || 'System',\n            severity: getSeverityFromType(item.type)\n          };\n        });\n        setActivity(transformedActivity);\n\n        // Set top tokens data from the real API response\n        const apiTopTokens = Array.isArray(dashboardData.topTokens) ? dashboardData.topTokens : [];\n        const transformedTopTokens = apiTopTokens.map(token => ({\n          name: token.name,\n          usage: token.usage,\n          category: token.category,\n          trend: token.trend || 'stable',\n          change: token.change || '0%'\n        }));\n        setTopTokens(transformedTopTokens);\n      } catch (apiError) {\n        console.warn('API not available, using mock data:', apiError);\n\n        // Use mock data when API is not available\n        setMetrics(mockMetrics);\n        setTeamData(mockTeamData);\n        setActivity(mockActivity);\n        setTopTokens(mockTopTokens);\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to load dashboard data');\n\n      // Fallback to mock data on error\n      setMetrics(mockMetrics);\n      setTeamData(mockTeamData);\n      setActivity(mockActivity);\n      setTopTokens(mockTopTokens);\n    } finally {\n      setLoading(false);\n    }\n  }, []); // Remove dependencies since mock data is now stable\n\n  const refreshData = useCallback(async () => {\n    await fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  // Load data on mount\n  useEffect(() => {\n    fetchDashboardData();\n  }, [fetchDashboardData]);\n  return {\n    // Data\n    metrics,\n    teamData,\n    activity,\n    topTokens,\n    // State\n    loading,\n    error,\n    // Actions\n    refreshData\n  };\n};\n_s(useDashboard, \"8XP87t6gMXMZRIaQxD5OTTGaLeA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","dashboardAPI","mockMetrics","totalTokens","activeUsages","teamsCount","criticalIssues","growthPercentage","usageGrowth","teamGrowth","issueReduction","mockTeamData","name","adoption","trend","mockActivity","id","type","description","timestamp","user","severity","mockTopTokens","usage","category","change","useDashboard","_s","transformActivityType","apiType","getSeverityFromType","metrics","setMetrics","teamData","setTeamData","activity","setActivity","topTokens","setTopTokens","loading","setLoading","error","setError","fetchDashboardData","_dashboardData$teamAd","dashboardResponse","getDashboardData","dashboardData","data","totalUsage","teamsUsing","weeklyGrowth","transformedTeamData","teamAdoption","map","team","teamName","adoptionScore","apiActivityData","Array","isArray","recentActivity","transformedActivity","item","_item$id","toString","Math","random","message","apiTopTokens","transformedTopTokens","token","apiError","console","warn","err","refreshData"],"sources":["/Users/samarmustafa/Documents/Samar/50-apps-to-launch/DS-TRACKER/frontend/src/hooks/useDashboard.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { dashboardAPI } from '../services/api';\n\nexport interface DashboardMetrics {\n  totalTokens: number;\n  activeUsages: number;\n  teamsCount: number;\n  criticalIssues: number;\n  growthPercentage: number;\n  usageGrowth: number;\n  teamGrowth: number;\n  issueReduction: number;\n}\n\nexport interface TeamAdoptionData {\n  name: string;\n  adoption: number;\n  trend: 'up' | 'down' | 'stable';\n}\n\nexport interface ActivityItem {\n  id: string;\n  type: 'scan' | 'token_update' | 'team_join' | 'issue';\n  description: string;\n  timestamp: string;\n  user?: string;\n  severity?: 'info' | 'warning' | 'error';\n}\n\nexport interface TopToken {\n  name: string;\n  usage: number;\n  category: string;\n  subcategory?: string;\n  purpose?: string;\n  type?: 'raw' | 'foundation' | 'component';\n  trend?: 'up' | 'down';\n  change?: string;\n}\n\n// Move mock data outside the component to prevent recreation on every render\nconst mockMetrics: DashboardMetrics = {\n  totalTokens: 247,\n  activeUsages: 1834,\n  teamsCount: 12,\n  criticalIssues: 3,\n  growthPercentage: 12.5,\n  usageGrowth: 8.2,\n  teamGrowth: 25.0,\n  issueReduction: -15.3,\n};\n\nconst mockTeamData: TeamAdoptionData[] = [\n  { name: 'Frontend', adoption: 95, trend: 'up' },\n  { name: 'Mobile', adoption: 87, trend: 'up' },\n  { name: 'Platform', adoption: 78, trend: 'stable' },\n  { name: 'Marketing', adoption: 45, trend: 'down' },\n  { name: 'Analytics', adoption: 62, trend: 'up' },\n];\n\nconst mockActivity: ActivityItem[] = [\n  {\n    id: '1',\n    type: 'scan',\n    description: 'Full system scan completed - 12 new token usages found',\n    timestamp: '2024-01-15T10:30:00Z',\n    user: 'System',\n    severity: 'info',\n  },\n  {\n    id: '2',\n    type: 'token_update',\n    description: 'Token color-primary updated from #1f2937 to #1e40af',\n    timestamp: '2024-01-15T09:15:00Z',\n    user: 'Sarah Chen',\n    severity: 'warning',\n  },\n  {\n    id: '3',\n    type: 'team_join',\n    description: 'Analytics team joined the design system',\n    timestamp: '2024-01-15T08:45:00Z',\n    user: 'Mike Johnson',\n    severity: 'info',\n  },\n  {\n    id: '4',\n    type: 'issue',\n    description: 'Deprecated token found in Mobile app - spacing-xl',\n    timestamp: '2024-01-15T08:20:00Z',\n    user: 'Scanner',\n    severity: 'error',\n  },\n  {\n    id: '5',\n    type: 'scan',\n    description: 'Mobile team scan completed - no issues found',\n    timestamp: '2024-01-15T07:30:00Z',\n    user: 'System',\n    severity: 'info',\n  },\n];\n\nconst mockTopTokens: TopToken[] = [\n  { name: 'color-primary-500', usage: 156, category: 'color', trend: 'up', change: '+12%' },\n  { name: 'spacing-md', usage: 143, category: 'spacing', trend: 'up', change: '+8%' },\n  { name: 'font-size-lg', usage: 132, category: 'typography', trend: 'up', change: '+15%' },\n  { name: 'border-radius-md', usage: 98, category: 'border', trend: 'up', change: '+5%' },\n  { name: 'shadow-lg', usage: 87, category: 'shadow', trend: 'down', change: '-2%' }\n];\n\nexport const useDashboard = () => {\n  // Helper functions to transform API data\n  const transformActivityType = (apiType: string): 'scan' | 'token_update' | 'team_join' | 'issue' => {\n    switch (apiType) {\n      case 'scan-completed':\n        return 'scan';\n      case 'token-updated':\n      case 'token-deprecated':\n        return 'token_update';\n      case 'team-added':\n        return 'team_join';\n      case 'approval-requested':\n        return 'issue';\n      default:\n        return 'scan';\n    }\n  };\n\n  const getSeverityFromType = (apiType: string): 'info' | 'warning' | 'error' => {\n    switch (apiType) {\n      case 'token-deprecated':\n      case 'approval-requested':\n        return 'warning';\n      case 'scan-failed':\n        return 'error';\n      default:\n        return 'info';\n    }\n  };\n\n  const [metrics, setMetrics] = useState<DashboardMetrics>({\n    totalTokens: 0,\n    activeUsages: 0,\n    teamsCount: 0,\n    criticalIssues: 0,\n    growthPercentage: 0,\n    usageGrowth: 0,\n    teamGrowth: 0,\n    issueReduction: 0,\n  });\n  \n  const [teamData, setTeamData] = useState<TeamAdoptionData[]>([]);\n  const [activity, setActivity] = useState<ActivityItem[]>([]);\n  const [topTokens, setTopTokens] = useState<TopToken[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchDashboardData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Try to fetch real data from API\n      try {\n        // Use the full dashboard endpoint instead of separate endpoints\n        const dashboardResponse = await dashboardAPI.getDashboardData();\n        const dashboardData = dashboardResponse.data.data;\n\n        // Set metrics from dashboard data\n        setMetrics({\n          totalTokens: dashboardData.metrics.totalTokens || 0,\n          activeUsages: dashboardData.metrics.totalUsage || 0,\n          teamsCount: dashboardData.metrics.teamsUsing || 0,\n          criticalIssues: dashboardData.metrics.criticalIssues || 0,\n          growthPercentage: dashboardData.metrics.weeklyGrowth || 0,\n          usageGrowth: dashboardData.metrics.weeklyGrowth || 0,\n          teamGrowth: 0, // Calculate from team data if needed\n          issueReduction: 0, // Calculate from historical data if needed\n        });\n\n        // Transform team adoption data\n        const transformedTeamData = dashboardData.teamAdoption?.map((team: any) => ({\n          name: team.teamName,\n          adoption: team.adoptionScore,\n          trend: team.trend || 'stable'\n        })) || [];\n        setTeamData(transformedTeamData);\n        \n        // Transform API activity data to match frontend interface\n        const apiActivityData = Array.isArray(dashboardData.recentActivity) ? dashboardData.recentActivity : [];\n        const transformedActivity = apiActivityData.map((item: any) => ({\n          id: item.id?.toString() || Math.random().toString(),\n          type: transformActivityType(item.type),\n          description: item.message || item.description || 'Activity recorded',\n          timestamp: item.timestamp,\n          user: item.user || 'System',\n          severity: getSeverityFromType(item.type)\n        }));\n        setActivity(transformedActivity);\n\n        // Set top tokens data from the real API response\n        const apiTopTokens = Array.isArray(dashboardData.topTokens) ? dashboardData.topTokens : [];\n        const transformedTopTokens = apiTopTokens.map((token: any) => ({\n          name: token.name,\n          usage: token.usage,\n          category: token.category,\n          trend: token.trend || 'stable',\n          change: token.change || '0%'\n        }));\n        setTopTokens(transformedTopTokens);\n\n      } catch (apiError) {\n        console.warn('API not available, using mock data:', apiError);\n        \n        // Use mock data when API is not available\n        setMetrics(mockMetrics);\n        setTeamData(mockTeamData);\n        setActivity(mockActivity);\n        setTopTokens(mockTopTokens);\n      }\n    } catch (err: any) {\n      setError(err.message || 'Failed to load dashboard data');\n      \n      // Fallback to mock data on error\n      setMetrics(mockMetrics);\n      setTeamData(mockTeamData);\n      setActivity(mockActivity);\n      setTopTokens(mockTopTokens);\n    } finally {\n      setLoading(false);\n    }\n  }, []); // Remove dependencies since mock data is now stable\n\n  const refreshData = useCallback(async () => {\n    await fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  // Load data on mount\n  useEffect(() => {\n    fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  return {\n    // Data\n    metrics,\n    teamData,\n    activity,\n    topTokens,\n    \n    // State\n    loading,\n    error,\n    \n    // Actions\n    refreshData,\n  };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,YAAY,QAAQ,iBAAiB;AAuC9C;AACA,MAAMC,WAA6B,GAAG;EACpCC,WAAW,EAAE,GAAG;EAChBC,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,EAAE;EACdC,cAAc,EAAE,CAAC;EACjBC,gBAAgB,EAAE,IAAI;EACtBC,WAAW,EAAE,GAAG;EAChBC,UAAU,EAAE,IAAI;EAChBC,cAAc,EAAE,CAAC;AACnB,CAAC;AAED,MAAMC,YAAgC,GAAG,CACvC;EAAEC,IAAI,EAAE,UAAU;EAAEC,QAAQ,EAAE,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,EAC/C;EAAEF,IAAI,EAAE,QAAQ;EAAEC,QAAQ,EAAE,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,EAC7C;EAAEF,IAAI,EAAE,UAAU;EAAEC,QAAQ,EAAE,EAAE;EAAEC,KAAK,EAAE;AAAS,CAAC,EACnD;EAAEF,IAAI,EAAE,WAAW;EAAEC,QAAQ,EAAE,EAAE;EAAEC,KAAK,EAAE;AAAO,CAAC,EAClD;EAAEF,IAAI,EAAE,WAAW;EAAEC,QAAQ,EAAE,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CACjD;AAED,MAAMC,YAA4B,GAAG,CACnC;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,MAAM;EACZC,WAAW,EAAE,wDAAwD;EACrEC,SAAS,EAAE,sBAAsB;EACjCC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,cAAc;EACpBC,WAAW,EAAE,qDAAqD;EAClEC,SAAS,EAAE,sBAAsB;EACjCC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,WAAW;EACjBC,WAAW,EAAE,yCAAyC;EACtDC,SAAS,EAAE,sBAAsB;EACjCC,IAAI,EAAE,cAAc;EACpBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,OAAO;EACbC,WAAW,EAAE,mDAAmD;EAChEC,SAAS,EAAE,sBAAsB;EACjCC,IAAI,EAAE,SAAS;EACfC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEL,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,MAAM;EACZC,WAAW,EAAE,8CAA8C;EAC3DC,SAAS,EAAE,sBAAsB;EACjCC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE;AACZ,CAAC,CACF;AAED,MAAMC,aAAyB,GAAG,CAChC;EAAEV,IAAI,EAAE,mBAAmB;EAAEW,KAAK,EAAE,GAAG;EAAEC,QAAQ,EAAE,OAAO;EAAEV,KAAK,EAAE,IAAI;EAAEW,MAAM,EAAE;AAAO,CAAC,EACzF;EAAEb,IAAI,EAAE,YAAY;EAAEW,KAAK,EAAE,GAAG;EAAEC,QAAQ,EAAE,SAAS;EAAEV,KAAK,EAAE,IAAI;EAAEW,MAAM,EAAE;AAAM,CAAC,EACnF;EAAEb,IAAI,EAAE,cAAc;EAAEW,KAAK,EAAE,GAAG;EAAEC,QAAQ,EAAE,YAAY;EAAEV,KAAK,EAAE,IAAI;EAAEW,MAAM,EAAE;AAAO,CAAC,EACzF;EAAEb,IAAI,EAAE,kBAAkB;EAAEW,KAAK,EAAE,EAAE;EAAEC,QAAQ,EAAE,QAAQ;EAAEV,KAAK,EAAE,IAAI;EAAEW,MAAM,EAAE;AAAM,CAAC,EACvF;EAAEb,IAAI,EAAE,WAAW;EAAEW,KAAK,EAAE,EAAE;EAAEC,QAAQ,EAAE,QAAQ;EAAEV,KAAK,EAAE,MAAM;EAAEW,MAAM,EAAE;AAAM,CAAC,CACnF;AAED,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC;EACA,MAAMC,qBAAqB,GAAIC,OAAe,IAAsD;IAClG,QAAQA,OAAO;MACb,KAAK,gBAAgB;QACnB,OAAO,MAAM;MACf,KAAK,eAAe;MACpB,KAAK,kBAAkB;QACrB,OAAO,cAAc;MACvB,KAAK,YAAY;QACf,OAAO,WAAW;MACpB,KAAK,oBAAoB;QACvB,OAAO,OAAO;MAChB;QACE,OAAO,MAAM;IACjB;EACF,CAAC;EAED,MAAMC,mBAAmB,GAAID,OAAe,IAAmC;IAC7E,QAAQA,OAAO;MACb,KAAK,kBAAkB;MACvB,KAAK,oBAAoB;QACvB,OAAO,SAAS;MAClB,KAAK,aAAa;QAChB,OAAO,OAAO;MAChB;QACE,OAAO,MAAM;IACjB;EACF,CAAC;EAED,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGlC,QAAQ,CAAmB;IACvDK,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE,CAAC;IACfC,UAAU,EAAE,CAAC;IACbC,cAAc,EAAE,CAAC;IACjBC,gBAAgB,EAAE,CAAC;IACnBC,WAAW,EAAE,CAAC;IACdC,UAAU,EAAE,CAAC;IACbC,cAAc,EAAE;EAClB,CAAC,CAAC;EAEF,MAAM,CAACuB,QAAQ,EAAEC,WAAW,CAAC,GAAGpC,QAAQ,CAAqB,EAAE,CAAC;EAChE,MAAM,CAACqC,QAAQ,EAAEC,WAAW,CAAC,GAAGtC,QAAQ,CAAiB,EAAE,CAAC;EAC5D,MAAM,CAACuC,SAAS,EAAEC,YAAY,CAAC,GAAGxC,QAAQ,CAAa,EAAE,CAAC;EAC1D,MAAM,CAACyC,OAAO,EAAEC,UAAU,CAAC,GAAG1C,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC2C,KAAK,EAAEC,QAAQ,CAAC,GAAG5C,QAAQ,CAAgB,IAAI,CAAC;EAEvD,MAAM6C,kBAAkB,GAAG3C,WAAW,CAAC,YAAY;IACjD,IAAI;MACFwC,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACA,IAAI;QAAA,IAAAE,qBAAA;QACF;QACA,MAAMC,iBAAiB,GAAG,MAAM5C,YAAY,CAAC6C,gBAAgB,CAAC,CAAC;QAC/D,MAAMC,aAAa,GAAGF,iBAAiB,CAACG,IAAI,CAACA,IAAI;;QAEjD;QACAhB,UAAU,CAAC;UACT7B,WAAW,EAAE4C,aAAa,CAAChB,OAAO,CAAC5B,WAAW,IAAI,CAAC;UACnDC,YAAY,EAAE2C,aAAa,CAAChB,OAAO,CAACkB,UAAU,IAAI,CAAC;UACnD5C,UAAU,EAAE0C,aAAa,CAAChB,OAAO,CAACmB,UAAU,IAAI,CAAC;UACjD5C,cAAc,EAAEyC,aAAa,CAAChB,OAAO,CAACzB,cAAc,IAAI,CAAC;UACzDC,gBAAgB,EAAEwC,aAAa,CAAChB,OAAO,CAACoB,YAAY,IAAI,CAAC;UACzD3C,WAAW,EAAEuC,aAAa,CAAChB,OAAO,CAACoB,YAAY,IAAI,CAAC;UACpD1C,UAAU,EAAE,CAAC;UAAE;UACfC,cAAc,EAAE,CAAC,CAAE;QACrB,CAAC,CAAC;;QAEF;QACA,MAAM0C,mBAAmB,GAAG,EAAAR,qBAAA,GAAAG,aAAa,CAACM,YAAY,cAAAT,qBAAA,uBAA1BA,qBAAA,CAA4BU,GAAG,CAAEC,IAAS,KAAM;UAC1E3C,IAAI,EAAE2C,IAAI,CAACC,QAAQ;UACnB3C,QAAQ,EAAE0C,IAAI,CAACE,aAAa;UAC5B3C,KAAK,EAAEyC,IAAI,CAACzC,KAAK,IAAI;QACvB,CAAC,CAAC,CAAC,KAAI,EAAE;QACToB,WAAW,CAACkB,mBAAmB,CAAC;;QAEhC;QACA,MAAMM,eAAe,GAAGC,KAAK,CAACC,OAAO,CAACb,aAAa,CAACc,cAAc,CAAC,GAAGd,aAAa,CAACc,cAAc,GAAG,EAAE;QACvG,MAAMC,mBAAmB,GAAGJ,eAAe,CAACJ,GAAG,CAAES,IAAS;UAAA,IAAAC,QAAA;UAAA,OAAM;YAC9DhD,EAAE,EAAE,EAAAgD,QAAA,GAAAD,IAAI,CAAC/C,EAAE,cAAAgD,QAAA,uBAAPA,QAAA,CAASC,QAAQ,CAAC,CAAC,KAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC;YACnDhD,IAAI,EAAEW,qBAAqB,CAACmC,IAAI,CAAC9C,IAAI,CAAC;YACtCC,WAAW,EAAE6C,IAAI,CAACK,OAAO,IAAIL,IAAI,CAAC7C,WAAW,IAAI,mBAAmB;YACpEC,SAAS,EAAE4C,IAAI,CAAC5C,SAAS;YACzBC,IAAI,EAAE2C,IAAI,CAAC3C,IAAI,IAAI,QAAQ;YAC3BC,QAAQ,EAAES,mBAAmB,CAACiC,IAAI,CAAC9C,IAAI;UACzC,CAAC;QAAA,CAAC,CAAC;QACHmB,WAAW,CAAC0B,mBAAmB,CAAC;;QAEhC;QACA,MAAMO,YAAY,GAAGV,KAAK,CAACC,OAAO,CAACb,aAAa,CAACV,SAAS,CAAC,GAAGU,aAAa,CAACV,SAAS,GAAG,EAAE;QAC1F,MAAMiC,oBAAoB,GAAGD,YAAY,CAACf,GAAG,CAAEiB,KAAU,KAAM;UAC7D3D,IAAI,EAAE2D,KAAK,CAAC3D,IAAI;UAChBW,KAAK,EAAEgD,KAAK,CAAChD,KAAK;UAClBC,QAAQ,EAAE+C,KAAK,CAAC/C,QAAQ;UACxBV,KAAK,EAAEyD,KAAK,CAACzD,KAAK,IAAI,QAAQ;UAC9BW,MAAM,EAAE8C,KAAK,CAAC9C,MAAM,IAAI;QAC1B,CAAC,CAAC,CAAC;QACHa,YAAY,CAACgC,oBAAoB,CAAC;MAEpC,CAAC,CAAC,OAAOE,QAAQ,EAAE;QACjBC,OAAO,CAACC,IAAI,CAAC,qCAAqC,EAAEF,QAAQ,CAAC;;QAE7D;QACAxC,UAAU,CAAC9B,WAAW,CAAC;QACvBgC,WAAW,CAACvB,YAAY,CAAC;QACzByB,WAAW,CAACrB,YAAY,CAAC;QACzBuB,YAAY,CAAChB,aAAa,CAAC;MAC7B;IACF,CAAC,CAAC,OAAOqD,GAAQ,EAAE;MACjBjC,QAAQ,CAACiC,GAAG,CAACP,OAAO,IAAI,+BAA+B,CAAC;;MAExD;MACApC,UAAU,CAAC9B,WAAW,CAAC;MACvBgC,WAAW,CAACvB,YAAY,CAAC;MACzByB,WAAW,CAACrB,YAAY,CAAC;MACzBuB,YAAY,CAAChB,aAAa,CAAC;IAC7B,CAAC,SAAS;MACRkB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMoC,WAAW,GAAG5E,WAAW,CAAC,YAAY;IAC1C,MAAM2C,kBAAkB,CAAC,CAAC;EAC5B,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;;EAExB;EACA5C,SAAS,CAAC,MAAM;IACd4C,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACA,kBAAkB,CAAC,CAAC;EAExB,OAAO;IACL;IACAZ,OAAO;IACPE,QAAQ;IACRE,QAAQ;IACRE,SAAS;IAET;IACAE,OAAO;IACPE,KAAK;IAEL;IACAmC;EACF,CAAC;AACH,CAAC;AAACjD,EAAA,CAlJWD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}