
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  team: 'team',
  role: 'role',
  avatarUrl: 'avatarUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  tokenId: 'tokenId',
  name: 'name',
  currentVersion: 'currentVersion',
  value: 'value',
  category: 'category',
  criticality: 'criticality',
  reviewRequired: 'reviewRequired',
  deprecationStatus: 'deprecationStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  creatorId: 'creatorId'
};

exports.Prisma.TokenHistoryScalarFieldEnum = {
  id: 'id',
  version: 'version',
  changes: 'changes',
  changedAt: 'changedAt',
  approvedAt: 'approvedAt',
  rollbackInfo: 'rollbackInfo',
  tokenId: 'tokenId',
  changedById: 'changedById'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactEmail: 'contactEmail',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  domain: 'domain',
  repository: 'repository',
  status: 'status',
  lastScanned: 'lastScanned',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teamId: 'teamId'
};

exports.Prisma.TokenUsageScalarFieldEnum = {
  id: 'id',
  usageCount: 'usageCount',
  lastUsed: 'lastUsed',
  implementation: 'implementation',
  filePaths: 'filePaths',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tokenId: 'tokenId',
  teamId: 'teamId',
  applicationId: 'applicationId'
};

exports.Prisma.PatternScalarFieldEnum = {
  id: 'id',
  patternId: 'patternId',
  name: 'name',
  description: 'description',
  complexity: 'complexity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatternTokenScalarFieldEnum = {
  id: 'id',
  patternId: 'patternId',
  tokenId: 'tokenId'
};

exports.Prisma.PatternUsageScalarFieldEnum = {
  id: 'id',
  usageCount: 'usageCount',
  lastUsed: 'lastUsed',
  teams: 'teams',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  patternId: 'patternId'
};

exports.Prisma.TokenDependencyScalarFieldEnum = {
  id: 'id',
  relationship: 'relationship',
  strength: 'strength',
  tokenId: 'tokenId',
  dependsOnId: 'dependsOnId'
};

exports.Prisma.ChangeRequestScalarFieldEnum = {
  id: 'id',
  type: 'type',
  proposedChanges: 'proposedChanges',
  reason: 'reason',
  impact: 'impact',
  status: 'status',
  testDeploymentId: 'testDeploymentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  tokenId: 'tokenId',
  requestedById: 'requestedById',
  approvedById: 'approvedById'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  message: 'message',
  type: 'type',
  priority: 'priority',
  isRead: 'isRead',
  channels: 'channels',
  metadata: 'metadata',
  createdAt: 'createdAt',
  readAt: 'readAt',
  userId: 'userId',
  changeRequestId: 'changeRequestId'
};

exports.Prisma.ScanResultScalarFieldEnum = {
  id: 'id',
  scanDate: 'scanDate',
  tokensFound: 'tokensFound',
  coverage: 'coverage',
  results: 'results',
  errors: 'errors',
  applicationId: 'applicationId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  DESIGNER: 'DESIGNER',
  DEVELOPER: 'DEVELOPER',
  MANAGER: 'MANAGER',
  ADMIN: 'ADMIN'
};

exports.TokenCategory = exports.$Enums.TokenCategory = {
  COLOR: 'COLOR',
  TYPOGRAPHY: 'TYPOGRAPHY',
  SPACING: 'SPACING',
  SHADOW: 'SHADOW',
  BORDER: 'BORDER',
  ANIMATION: 'ANIMATION',
  BREAKPOINT: 'BREAKPOINT'
};

exports.Criticality = exports.$Enums.Criticality = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.DeprecationStatus = exports.$Enums.DeprecationStatus = {
  STABLE: 'STABLE',
  DEPRECATED: 'DEPRECATED',
  SUNSET: 'SUNSET'
};

exports.AppType = exports.$Enums.AppType = {
  WEBSITE: 'WEBSITE',
  MOBILE_APP: 'MOBILE_APP',
  DESKTOP_APP: 'DESKTOP_APP',
  EMAIL: 'EMAIL',
  SOCIAL: 'SOCIAL'
};

exports.AppStatus = exports.$Enums.AppStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ERROR: 'ERROR'
};

exports.Implementation = exports.$Enums.Implementation = {
  CSS_VARIABLES: 'CSS_VARIABLES',
  SCSS_IMPORT: 'SCSS_IMPORT',
  JS_OBJECT: 'JS_OBJECT',
  DESIGN_TOKENS: 'DESIGN_TOKENS'
};

exports.Complexity = exports.$Enums.Complexity = {
  SIMPLE: 'SIMPLE',
  MEDIUM: 'MEDIUM',
  COMPLEX: 'COMPLEX'
};

exports.DependencyType = exports.$Enums.DependencyType = {
  USES: 'USES',
  EXTENDS: 'EXTENDS',
  REFERENCES: 'REFERENCES'
};

exports.ChangeType = exports.$Enums.ChangeType = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  DEPRECATE: 'DEPRECATE'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  IN_REVIEW: 'IN_REVIEW'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  TOKEN_CREATED: 'TOKEN_CREATED',
  TOKEN_UPDATED: 'TOKEN_UPDATED',
  TOKEN_DEPRECATED: 'TOKEN_DEPRECATED',
  CHANGE_REQUEST: 'CHANGE_REQUEST',
  APPROVAL_REQUIRED: 'APPROVAL_REQUIRED',
  SCAN_COMPLETED: 'SCAN_COMPLETED',
  SYSTEM_ALERT: 'SYSTEM_ALERT'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Token: 'Token',
  TokenHistory: 'TokenHistory',
  Team: 'Team',
  Application: 'Application',
  TokenUsage: 'TokenUsage',
  Pattern: 'Pattern',
  PatternToken: 'PatternToken',
  PatternUsage: 'PatternUsage',
  TokenDependency: 'TokenDependency',
  ChangeRequest: 'ChangeRequest',
  Notification: 'Notification',
  ScanResult: 'ScanResult'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
